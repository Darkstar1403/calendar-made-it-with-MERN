{"ast":null,"code":"import Swal from \"sweetalert2\";\nimport { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nexport const startLogin = (email, password) => {\n  return async dispatch => {\n    const resp = await fetchWithoutToken('auth', {\n      email,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startRegister = (email, name, password) => {\n  return async dispatch => {\n    const resp = await fetchWithoutToken('auth/register', {\n      name,\n      email,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startChecking = () => {\n  return async dispatch => {\n    const resp = await fetchWithToken('auth/renew');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish\n});\n\nconst login = user => ({\n  type: types.authLogin,\n  payload: user\n});\n\nexport const startLogout = () => {\n  return dispatch => {\n    localStorage.clear();\n    dispatch(logout());\n  };\n};\n\nconst logout = () => ({\n  type: types.authLogout\n});","map":{"version":3,"sources":["C:/Users/Branco/Desktop/React/react-09-calendar-app/src/actions/auth.js"],"names":["Swal","fetchWithoutToken","fetchWithToken","types","startLogin","email","password","dispatch","resp","body","json","ok","localStorage","setItem","token","Date","getTime","login","uid","name","fire","msg","startRegister","startChecking","checkingFinish","type","authCheckingFinish","user","authLogin","payload","startLogout","clear","logout","authLogout"],"mappings":"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","sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\n\r\nexport const startLogin = (email, password) =>{\r\n    return async(dispatch) =>{\r\n        const resp = await fetchWithoutToken('auth', {email, password}, 'POST');\r\n        const body = await resp.json();\r\n        if(body.ok){\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }));\r\n        }\r\n        else{\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n    }\r\n};\r\n\r\nexport const startRegister = (email, name, password) =>{\r\n    return async(dispatch) =>{\r\n        const resp = await fetchWithoutToken('auth/register', {name, email, password}, 'POST');\r\n        const body = await resp.json();\r\n        if(body.ok){\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }));\r\n        }\r\n        else{\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n    }\r\n}\r\n\r\nexport const startChecking = () =>{\r\n    return async(dispatch) =>{\r\n        const resp = await fetchWithToken('auth/renew');\r\n        const body = await resp.json();\r\n        if(body.ok){\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }));\r\n        }\r\n        else{\r\n            dispatch(checkingFinish());\r\n        }\r\n    }\r\n}\r\n\r\nconst checkingFinish = () =>({type: types.authCheckingFinish});\r\n\r\nconst login = (user) =>({\r\n    type: types.authLogin,\r\n    payload: user\r\n});\r\n\r\nexport const startLogout = () =>{\r\n    return (dispatch) =>{\r\n        localStorage.clear();\r\n        dispatch(logout());\r\n    }\r\n}\r\n\r\nconst logout = () => ({type:types.authLogout});"]},"metadata":{},"sourceType":"module"}