{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Branco\\\\Desktop\\\\React\\\\react-09-calendar-app\\\\src\\\\components\\\\calendar\\\\CalendarScreen.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport { Navbar } from '../ui/Navbar';\nimport { messages } from '../../helpers/calendar-messages-es';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'moment/locale/es-mx';\nimport { CalendarEvent } from './CalendarEvent';\nimport { CalendarModal } from './CalendarModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uiOpenModal } from '../../actions/ui';\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/calendar';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmoment.locale('es');\nconst localizer = momentLocalizer(moment);\nexport const CalendarScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    events,\n    activeEvent\n  } = useSelector(state => state.calendar);\n  const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\n  const {\n    uid\n  } = useSelector(state => state.auth);\n  useEffect(() => {\n    dispatch(eventStartLoading());\n  }, [dispatch]);\n\n  const onDoubleClick = e => {\n    dispatch(uiOpenModal());\n  };\n\n  const onSelect = e => {\n    dispatch(eventSetActive(e));\n  };\n\n  const onViewChange = e => {\n    setLastView(e);\n    localStorage.setItem('lastView', e);\n  };\n\n  const eventStyleGetter = (event, start, end, isSelected) => {\n    const style = {\n      backgroundColor: '#367CF7',\n      borderRadius: '0px',\n      opacity: 0.8,\n      display: 'block',\n      color: 'white'\n    };\n    return {\n      style\n    };\n  };\n\n  const handleSelectSlot = e => {\n    //opcional \n    activeEvent && dispatch(eventClearActiveEvent());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: '100vh'\n      },\n      messages: messages,\n      eventPropGetter: eventStyleGetter,\n      onDoubleClickEvent: onDoubleClick,\n      onSelectEvent: onSelect,\n      onView: onViewChange,\n      view: lastView,\n      components: {\n        event: CalendarEvent\n      },\n      onSelectSlot: handleSelectSlot,\n      selectable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddNewFab, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), activeEvent && /*#__PURE__*/_jsxDEV(DeleteEventFab, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(CalendarModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CalendarScreen, \"a1HYI/xWstiR1Ib3BPXB6/xQ7H8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CalendarScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarScreen\");","map":{"version":3,"sources":["C:/Users/Branco/Desktop/React/react-09-calendar-app/src/components/calendar/CalendarScreen.js"],"names":["moment","React","useEffect","useState","Calendar","momentLocalizer","Navbar","messages","CalendarEvent","CalendarModal","useDispatch","useSelector","uiOpenModal","eventClearActiveEvent","eventSetActive","eventStartLoading","AddNewFab","DeleteEventFab","locale","localizer","CalendarScreen","dispatch","events","activeEvent","state","calendar","lastView","setLastView","localStorage","getItem","uid","auth","onDoubleClick","e","onSelect","onViewChange","setItem","eventStyleGetter","event","start","end","isSelected","style","backgroundColor","borderRadius","opacity","display","color","handleSelectSlot","height"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,oCAAzB;AACA,OAAO,mDAAP;AACA,OAAO,qBAAP;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,iBAAhD,QAAyE,wBAAzE;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,sBAA/B;;AAEAjB,MAAM,CAACkB,MAAP,CAAc,IAAd;AAEA,MAAMC,SAAS,GAAGd,eAAe,CAACL,MAAD,CAAjC;AAEA,OAAO,MAAMoB,cAAc,GAAG,MAAM;AAAA;;AAEhC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAACY,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAwBZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,QAAhB,CAAzC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAACyB,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,OAArC,CAAxC;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAQnB,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACO,IAAhB,CAAzB;AAEA7B,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,QAAQ,CAACN,iBAAiB,EAAlB,CAAR;AACH,GAFQ,EAEN,CAACM,QAAD,CAFM,CAAT;;AAIA,QAAMW,aAAa,GAAIC,CAAD,IAAM;AACxBZ,IAAAA,QAAQ,CAACT,WAAW,EAAZ,CAAR;AACH,GAFD;;AAIA,QAAMsB,QAAQ,GAAID,CAAD,IAAM;AACnBZ,IAAAA,QAAQ,CAACP,cAAc,CAACmB,CAAD,CAAf,CAAR;AACH,GAFD;;AAIA,QAAME,YAAY,GAAIF,CAAD,IAAM;AACvBN,IAAAA,WAAW,CAACM,CAAD,CAAX;AACAL,IAAAA,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCH,CAAjC;AACH,GAHD;;AAKA,QAAMI,gBAAgB,GAAG,CAACC,KAAD,EAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,KAAmC;AAIxD,UAAMC,KAAK,GAAG;AACVC,MAAAA,eAAe,EAAE,SADP;AAEVC,MAAAA,YAAY,EAAE,KAFJ;AAGVC,MAAAA,OAAO,EAAE,GAHC;AAIVC,MAAAA,OAAO,EAAE,OAJC;AAKVC,MAAAA,KAAK,EAAE;AALG,KAAd;AAOA,WAAO;AACHL,MAAAA;AADG,KAAP;AAGH,GAdD;;AAgBA,QAAMM,gBAAgB,GAAIf,CAAD,IAAM;AACnC;AACQV,IAAAA,WAAW,IAAIF,QAAQ,CAACR,qBAAqB,EAAtB,CAAvB;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AACI,MAAA,SAAS,EAAEM,SADf;AAEI,MAAA,MAAM,EAAEG,MAFZ;AAGI,MAAA,aAAa,EAAC,OAHlB;AAII,MAAA,WAAW,EAAC,KAJhB;AAKI,MAAA,KAAK,EAAE;AAAE2B,QAAAA,MAAM,EAAE;AAAV,OALX;AAMI,MAAA,QAAQ,EAAE1C,QANd;AAOI,MAAA,eAAe,EAAI8B,gBAPvB;AAQI,MAAA,kBAAkB,EAAIL,aAR1B;AASI,MAAA,aAAa,EAAEE,QATnB;AAUI,MAAA,MAAM,EAAEC,YAVZ;AAWI,MAAA,IAAI,EAAET,QAXV;AAYI,MAAA,UAAU,EAAE;AACRY,QAAAA,KAAK,EAAE9B;AADC,OAZhB;AAeI,MAAA,YAAY,EAAIwC,gBAfpB;AAgBI,MAAA,UAAU,EAAE;AAhBhB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAoBI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YApBJ,EAqBKzB,WAAW,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YArBpB,eAsBI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CAxEM;;GAAMH,c;UAEQV,W,EACaC,W,EAGhBA,W;;;KANLS,c","sourcesContent":["import moment from 'moment';\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { messages } from '../../helpers/calendar-messages-es';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport 'moment/locale/es-mx';\r\nimport { CalendarEvent } from './CalendarEvent';\r\nimport { CalendarModal } from './CalendarModal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { uiOpenModal } from '../../actions/ui';\r\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/calendar';\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\r\n\r\nmoment.locale('es');\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport const CalendarScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {events, activeEvent} = useSelector(state => state.calendar)\r\n    const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\r\n\r\n    const {uid} = useSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(eventStartLoading());\r\n    }, [dispatch]);\r\n\r\n    const onDoubleClick = (e) =>{\r\n        dispatch(uiOpenModal());\r\n    }\r\n\r\n    const onSelect = (e) =>{\r\n        dispatch(eventSetActive(e));\r\n    }\r\n\r\n    const onViewChange = (e) =>{\r\n        setLastView(e);\r\n        localStorage.setItem('lastView', e);\r\n    }\r\n\r\n    const eventStyleGetter = (event , start, end, isSelected) =>{\r\n\r\n\r\n\r\n        const style = {\r\n            backgroundColor: '#367CF7',\r\n            borderRadius: '0px',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: 'white'\r\n        }\r\n        return {\r\n            style\r\n        }\r\n    };\r\n\r\n    const handleSelectSlot = (e) =>{\r\n//opcional \r\n        activeEvent && dispatch(eventClearActiveEvent());\r\n    }\r\n\r\n    return (\r\n        <div className='calendar-screen'>\r\n            <Navbar/>\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                style={{ height: '100vh' }}\r\n                messages={messages}\r\n                eventPropGetter = {eventStyleGetter}\r\n                onDoubleClickEvent = {onDoubleClick}\r\n                onSelectEvent={onSelect}\r\n                onView={onViewChange}\r\n                view={lastView}\r\n                components={{\r\n                    event: CalendarEvent\r\n                }}\r\n                onSelectSlot = {handleSelectSlot}\r\n                selectable={true}\r\n            />\r\n            <AddNewFab/>\r\n            {activeEvent && <DeleteEventFab/>}\r\n            <CalendarModal/>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}