{"ast":null,"code":"import Swal from \"sweetalert2\";\nimport { fetchWithToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchWithToken('events/', event, 'POST');\n      const body = await resp.json();\n\n      if (body.ok) {\n        event.id = body.event.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      Swal.fire('Error', 'Save error', 'error');\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\nexport const eventDeleted = () => ({\n  type: types.eventDeleted\n});\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchWithToken('events/');\n      const body = await resp.json();\n      console.log(body);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});","map":{"version":3,"sources":["C:/Users/Branco/Desktop/React/react-09-calendar-app/src/actions/calendar.js"],"names":["Swal","fetchWithToken","types","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","ok","id","user","_id","eventAddNew","error","fire","console","log","type","payload","eventSetActive","eventClearActiveEvent","eventUpdated","eventDeleted","eventStartLoading","eventLoaded","events"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAU;AACtC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA4B;AAC/B,UAAM;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,QAAcF,QAAQ,GAAGG,IAA/B;;AACA,QAAI;AACA,YAAMC,IAAI,GAAG,MAAMT,cAAc,CAAC,SAAD,EAAYG,KAAZ,EAAmB,MAAnB,CAAjC;AACA,YAAMO,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;AACA,UAAGD,IAAI,CAACE,EAAR,EAAW;AACPT,QAAAA,KAAK,CAACU,EAAN,GAAWH,IAAI,CAACP,KAAL,CAAWU,EAAtB;AACAV,QAAAA,KAAK,CAACW,IAAN,GAAa;AACTC,UAAAA,GAAG,EAAET,GADI;AAETC,UAAAA,IAAI,EAAEA;AAFG,SAAb;AAIAH,QAAAA,QAAQ,CAACY,WAAW,CAACb,KAAD,CAAZ,CAAR;AACH;AACJ,KAXD,CAWE,OAAOc,KAAP,EAAc;AACZlB,MAAAA,IAAI,CAACmB,IAAL,CAAU,OAAV,EAAmB,YAAnB,EAAiC,OAAjC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH;AAEJ,GAlBD;AAmBH,CApBM;;AAsBP,MAAOD,WAAW,GAAIb,KAAD,KAAY;AAC7BkB,EAAAA,IAAI,EAAEpB,KAAK,CAACe,WADiB;AAE7BM,EAAAA,OAAO,EAAEnB;AAFoB,CAAZ,CAArB;;AAKA,OAAO,MAAMoB,cAAc,GAAIpB,KAAD,KAAW;AACrCkB,EAAAA,IAAI,EAAEpB,KAAK,CAACsB,cADyB;AAErCD,EAAAA,OAAO,EAAEnB;AAF4B,CAAX,CAAvB;AAKP,OAAO,MAAMqB,qBAAqB,GAAG,OAAM;AACvCH,EAAAA,IAAI,EAAEpB,KAAK,CAACuB;AAD2B,CAAN,CAA9B;AAIP,OAAO,MAAMC,YAAY,GAAItB,KAAD,KAAW;AACnCkB,EAAAA,IAAI,EAAEpB,KAAK,CAACwB,YADuB;AAEnCH,EAAAA,OAAO,EAAEnB;AAF0B,CAAX,CAArB;AAKP,OAAO,MAAMuB,YAAY,GAAG,OAAM;AAC9BL,EAAAA,IAAI,EAAEpB,KAAK,CAACyB;AADkB,CAAN,CAArB;AAGP,OAAO,MAAMC,iBAAiB,GAAG,MAAK;AAClC,SAAO,MAAMvB,QAAN,IAAkB;AACrB,QAAI;AACA,YAAMK,IAAI,GAAG,MAAMT,cAAc,CAAC,SAAD,CAAjC;AACA,YAAMU,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACH,KAJD,CAIE,OAAOO,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH;AACJ,GARD;AASH,CAVM;;AAYP,MAAMW,WAAW,GAAIC,MAAD,KAAY;AAC5BR,EAAAA,IAAI,EAAEpB,KAAK,CAAC2B,WADgB;AAE5BN,EAAAA,OAAO,EAAEO;AAFmB,CAAZ,CAApB","sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { fetchWithToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\n\r\nexport const eventStartAddNew = (event) =>{\r\n    return async(dispatch, getState) =>{\r\n        const {uid, name} = getState().auth;\r\n        try {\r\n            const resp = await fetchWithToken('events/', event, 'POST');\r\n            const body = await resp.json();\r\n            if(body.ok){\r\n                event.id = body.event.id;\r\n                event.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                }\r\n                dispatch(eventAddNew(event));\r\n            }\r\n        } catch (error) {\r\n            Swal.fire('Error', 'Save error', 'error');\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n} \r\n\r\nconst  eventAddNew = (event) => ({\r\n    type: types.eventAddNew,\r\n    payload: event\r\n});\r\n\r\nexport const eventSetActive = (event) =>({\r\n    type: types.eventSetActive,\r\n    payload: event\r\n});\r\n\r\nexport const eventClearActiveEvent = () =>({\r\n    type: types.eventClearActiveEvent\r\n});\r\n\r\nexport const eventUpdated = (event) =>({\r\n    type: types.eventUpdated,\r\n    payload: event\r\n});\r\n\r\nexport const eventDeleted = () =>({\r\n    type: types.eventDeleted});\r\n\r\nexport const eventStartLoading = () =>{\r\n    return async(dispatch) =>{\r\n        try {\r\n            const resp = await fetchWithToken('events/');\r\n            const body = await resp.json();\r\n            console.log(body);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n};\r\n\r\nconst eventLoaded = (events) =>({\r\n    type: types.eventLoaded,\r\n    payload: events\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}